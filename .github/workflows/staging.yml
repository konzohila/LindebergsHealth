name: 🧪 Staging Deployment

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ develop ]

env:
  DOTNET_VERSION: '8.0.x'
  API_PROJECT_PATH: 'src/Presentation/LindebergsHealth.Api'
  WEB_PROJECT_PATH: 'src/Presentation/LindebergsHealth.BlazorApp'

jobs:
  quality-checks:
    name: 🛡️ Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 🧹 Code Formatting (dotnet format)
        run: dotnet format --verify-no-changes --severity warn
      - name: 🕵️ Static Code Analysis (dotnet build)
        run: dotnet build --configuration Release --no-restore -warnaserror
      - name: 🔒 Dependency Vulnerability Scan
        run: dotnet list package --vulnerable
      # Secret Scanning: GitHub führt dies automatisch für Pushes und PRs durch (siehe GitHub Advanced Security).
    # Quality-Checks müssen erfolgreich sein, bevor gebaut/getestet wird
    outputs:
      checks-passed: ${{ steps.*.outcome == 'success' }}

  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore
      
    - name: 🔨 Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: 🧪 Run tests with coverage
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./TestResults
    - name: 📊 Check coverage gate (min. 80%)
      run: |
        xml_file=$(find ./TestResults -name 'coverage.cobertura.xml' | head -n 1)
        if [ -z "$xml_file" ]; then
          echo "No coverage report found!"; exit 1;
        fi
        coverage=$(xmllint --xpath 'string(//coverage/@line-rate)' "$xml_file")
        percent=$(awk "BEGIN {printf \"%.0f\", $coverage * 100}")
        echo "Coverage: $percent%"
        if [ "$percent" -lt 80 ]; then
          echo "Coverage ($percent%) is below required threshold (80%)!"; exit 1;
        fi
      shell: bash
  
  deploy-staging:
    name: 🚀 Deploy to Azure Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Build API for deployment
      run: |
        dotnet publish ${{ env.API_PROJECT_PATH }} \
          --configuration Release \
          --output ./api-staging
          
    - name: 📦 Build BlazorApp for deployment  
      run: |
        dotnet publish ${{ env.WEB_PROJECT_PATH }} \
          --configuration Release \
          --output ./web-staging
    
    
    - name: ✅ Staging deployment complete
      run: echo "🧪 Staging deployment completed successfully!" 