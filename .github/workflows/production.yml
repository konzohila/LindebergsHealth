name: 🔥 Production Deployment

on:
  # Nur auf Pull Requests nach main und auf direkte Pushes auf main (z.B. Merge-Commits)
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    # Optional: Ignoriere Pushes auf Feature-Branches explizit
    # paths-ignore:
    #   - '**'
    #   - '!src/**'
    #   - '!tests/**'
  workflow_dispatch:
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '8.0.x'
  API_PROJECT_PATH: 'src/Presentation/LindebergsHealth.Api'
  WEB_PROJECT_PATH: 'src/Presentation/LindebergsHealth.Web'

jobs:
  quality-checks:
    name: 🛡️ Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🔧 Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: 🧹 Code Formatting (dotnet format)
        run: dotnet format --verify-no-changes --severity warn
      - name: 🕵️ Static Code Analysis (dotnet build)
        run: dotnet build --configuration Release --no-restore -warnaserror
      - name: 🔒 Dependency Vulnerability Scan
        run: dotnet list package --vulnerable
      # Secret Scanning: GitHub führt dies automatisch für Pushes und PRs durch (siehe GitHub Advanced Security).
    outputs:
      checks-passed: ${{ steps.*.outcome == 'success' }}

  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Restore dependencies
      run: dotnet restore
      
    - name: 🔨 Build solution
      run: dotnet build --configuration Release --no-restore
      
    - name: 🧪 Run tests
      run: dotnet test --configuration Debug --no-build --verbosity normal
  
  deploy-production:
    name: 🚀 Deploy to Azure Production
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: 📦 Build API for deployment
      run: |
        dotnet publish ${{ env.API_PROJECT_PATH }} \
          --configuration Release \
          --output ./api-production
          
    - name: 📦 Build Web for deployment  
      run: |
        dotnet publish ${{ env.WEB_PROJECT_PATH }} \
          --configuration Release \
          --output ./web-production
    

    
    - name: ✅ Production deployment complete
      run: echo "🔥 Production deployment completed successfully!" 