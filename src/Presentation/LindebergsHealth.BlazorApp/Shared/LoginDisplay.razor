@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized>
        <div class="nav-item px-3">
            <span class="nav-link">Hallo, @context.User.Identity?.Name!</span>
        </div>
        <div class="nav-item px-3">
            <button class="nav-link btn btn-link" @onclick="BeginLogOut">Abmelden</button>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="nav-item px-3">
            <a href="authentication/login" class="nav-link">Anmelden</a>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private async Task BeginLogOut()
    {
        try
        {
            // Verwende die JavaScript-Hilfsfunktion zum Cache leeren
            var cacheCleared = await JSRuntime.InvokeAsync<bool>("authHelper.clearMsalCache");
            
            if (cacheCleared)
            {
                Console.WriteLine("MSAL Cache erfolgreich geleert");
            }
            
            // Moderne MSAL Logout-Methode verwenden
            Navigation.NavigateToLogout("authentication/logout");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout-Fehler: {ex.Message}");
            
            // Fallback: Cache manuell leeren und direkt zur Logout-Seite
            try
            {
                await JSRuntime.InvokeVoidAsync("authHelper.clearMsalCache");
                await Task.Delay(500); // Kurz warten
                Navigation.NavigateTo("authentication/logout", forceLoad: true);
            }
            catch
            {
                // Letzter Fallback: Seite neu laden
                await JSRuntime.InvokeVoidAsync("authHelper.forceReload");
            }
        }
    }
} 