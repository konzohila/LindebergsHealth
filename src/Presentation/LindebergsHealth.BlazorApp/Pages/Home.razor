@page "/"
@using Syncfusion.Blazor.Schedule
@using LindebergsHealth.BlazorApp.Models
@using LindebergsHealth.Application.Termine.Dto

<PageTitle>Kalender</PageTitle>

<SfSchedule TValue="TerminUiModel" Height="650px">
    <ScheduleEventSettings TValue="TerminUiModel" DataSource="@DataSource">
        <ScheduleEventFields
            Id="Id"
            Subject="Titel"
            StartTime="Datum"
            EndTime="EndTime"
            Description="Beschreibung"
            Location="RaumName" />
    </ScheduleEventSettings>
</SfSchedule>

<button class="btn btn-primary mt-3" @onclick="AddTestTermin">Test-Termin anlegen</button>

@inject HttpClient Http

@code {
    List<TerminUiModel> DataSource = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTermine();
    }

    private async Task LoadTermine()
    {
        try
        {
            var termineDtos = await Http.GetFromJsonAsync<List<TerminDetailDto>>("api/Termin");
            if (termineDtos is not null)
            {
                DataSource = termineDtos.ToUiModels();
            }
        }
        catch (Exception ex)
        {
            // Optional: Logging, UI-Fehleranzeige etc.
            DataSource = new List<TerminUiModel>();
        }
    }

    private async Task AddTestTermin()
    {
        var newTermin = new CreateTerminDto
        {
            Titel = "Test-Termin",
            Beschreibung = "Automatisch angelegt",
            Datum = DateTime.Now.AddHours(1),
            DauerMinuten = 60,
            // Dummy-IDs f√ºr Demo, ggf. aus UI holen
            MitarbeiterId = null,
            RaumId = null,
            KategorieId = null,
            PatientId = null
        };
        var response = await Http.PostAsJsonAsync("api/Termin", newTermin);
        if (response.IsSuccessStatusCode)
        {
            await LoadTermine();
        }
    }

    private async Task UpdateTermin(TerminUiModel termin)
    {
        var updateDto = new UpdateTerminDto
        {
            Id = termin.Id,
            Titel = termin.Titel,
            Beschreibung = termin.Beschreibung,
            Datum = termin.Datum,
            DauerMinuten = termin.DauerMinuten,
            MitarbeiterId = null,
            PatientId = null,
            RaumId = null,
            KategorieId = null
        };
        var response = await Http.PutAsJsonAsync($"api/Termin/{termin.Id}", updateDto);
        if (response.IsSuccessStatusCode)
        {
            await LoadTermine();
        }
    }

    private async Task DeleteTermin(Guid id)
    {
        var response = await Http.DeleteAsync($"api/Termin/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadTermine();
        }
    }
}